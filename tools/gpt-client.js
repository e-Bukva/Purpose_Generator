/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI ChatGPT API
 */

import OpenAI from 'openai';
import { createReadStream, readFileSync } from 'fs';
import { basename, extname } from 'path';
import { SYSTEM_PROMPT, getInitialPrompt, getCorrectionPrompt } from '../config/gpt-prompts.js';

let openaiClient = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API /v1/chat/completions
 */
export function initializeOpenAI(apiKey, model = 'gpt-5') {
  if (!apiKey) {
    throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
  }
  
  openaiClient = new OpenAI({
    apiKey: apiKey
  });
  
  return { client: openaiClient, model };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
 */
export async function validateAPIKey(apiKey) {
  try {
    const testClient = new OpenAI({ apiKey });
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await testClient.models.list();
    return true;
  } catch (error) {
    return false;
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ OpenAI –∏ –ø–æ–ª—É—á–∏—Ç—å file_id
 */
async function uploadFile(filePath) {
  if (!openaiClient) {
    throw new Error('OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  
  try {
    console.log(`  üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${basename(filePath)}...`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI SDK –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const file = await openaiClient.files.create({
      file: createReadStream(filePath),
      purpose: 'user_data'  // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ attachments
    });
    
    console.log(`  ‚úì –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${file.id}`);
    return file.id;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Responses API /v1/responses —Å input_file
 */
export async function generateHTMLFromFile(filePath, model = 'gpt-5') {
  if (!openaiClient) {
    throw new Error('OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initializeOpenAI() —Å–Ω–∞—á–∞–ª–∞.');
  }
  
  try {
    const ext = extname(filePath).toLowerCase();
    
    // –î–ª—è PDF - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Responses API
    if (ext === '.pdf') {
      return await generateFromPDFViaFile(filePath, model);
    } else {
      // –î–ª—è Word –∏ Markdown - —á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Responses API –∫–∞–∫ input_text
      const fileContent = readFileSync(filePath, 'utf-8');
      console.log(`  üìÑ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${basename(filePath)}...`);
      return await generateFromTextViaResponses(fileContent, model);
    }
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –∏–∑ —Ñ–∞–π–ª–∞: ${error.message}`);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∏–∑ PDF —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
 */
async function generateFromPDFViaFile(filePath, model) {
  const fileId = await uploadFile(filePath);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Responses API —Å —Ñ–∞–π–ª–æ–º
      const response = await fetch('https://api.openai.com/v1/responses', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiClient.apiKey}`
      },
      body: JSON.stringify({
        model: model,
        input: [
          {
            role: 'system',
            content: [
              { type: 'input_text', text: SYSTEM_PROMPT }
            ]
          },
          {
            role: 'user',
            content: [
              { 
                type: 'input_text', 
                text: '–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ HTML –ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ system prompt. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∏–≥–Ω–æ—Ä–∏—Ä—É–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã, –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.' 
              },
              {
                type: 'input_file',
                file_id: fileId
              }
            ]
          }
        ],
        max_output_tokens: 16000
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API error ${response.status}: ${errorText}`);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ Responses API
    const data = await response.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (data.status === 'incomplete') {
      throw new Error(`–û—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π: ${data.incomplete_details?.reason}. –£–≤–µ–ª–∏—á—å—Ç–µ max_output_tokens`);
    }
    
    // –ò—â–µ–º message –≤ output (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: reasoning + message)
    const messageOutput = data.output.find(item => item.type === 'message');
    if (!messageOutput || !messageOutput.content) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω message –≤ output: ${JSON.stringify(data.output)}`);
    }
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const textContent = messageOutput.content.find(item => item.type === 'output_text');
    if (!textContent) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω output_text –≤ content: ${JSON.stringify(messageOutput.content)}`);
    }
    
    const htmlContent = textContent.text.trim();
    
    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown –æ–±—ë—Ä—Ç–æ–∫
    let cleanHTML = htmlContent;
    if (cleanHTML.startsWith('```html')) {
      cleanHTML = cleanHTML.replace(/^```html\n/, '').replace(/\n```$/, '');
    } else if (cleanHTML.startsWith('```')) {
      cleanHTML = cleanHTML.replace(/^```\n/, '').replace(/\n```$/, '');
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º usage –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const usage = {
      prompt_tokens: data.usage?.input_tokens || 0,
      completion_tokens: data.usage?.output_tokens || 0,
      total_tokens: data.usage?.total_tokens || 0
    };
    
    return {
      html: cleanHTML,
      usage: usage,
      model: data.model,
      fileId: fileId
    };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Responses API
 */
async function generateFromTextViaResponses(textContent, model) {
  const response = await fetch('https://api.openai.com/v1/responses', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${openaiClient.apiKey}`
    },
    body: JSON.stringify({
      model: model,
      input: [
        {
          role: 'user',
          content: [
            { 
              type: 'input_text', 
              text: SYSTEM_PROMPT + '\n\n–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ HTML –ø–æ —à–∞–±–ª–æ–Ω—É. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∏–≥–Ω–æ—Ä–∏—Ä—É–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã, –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n\n' + textContent
            }
          ]
        }
      ],
      max_output_tokens: 16000
    })
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`API error ${response.status}: ${errorText}`);
  }
  
  const data = await response.json();
  
  if (data.status === 'incomplete') {
    throw new Error(`–û—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π: ${data.incomplete_details?.reason}`);
  }
  
  const messageOutput = data.output.find(item => item.type === 'message');
  if (!messageOutput || !messageOutput.content) {
    throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω message –≤ output`);
  }
  
  const outputText = messageOutput.content.find(item => item.type === 'output_text');
  if (!outputText) {
    throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω output_text`);
  }
  
  const htmlContent = outputText.text.trim();
  
  // –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown –æ–±—ë—Ä—Ç–æ–∫
  let cleanHTML = htmlContent;
  if (cleanHTML.startsWith('```html')) {
    cleanHTML = cleanHTML.replace(/^```html\n/, '').replace(/\n```$/, '');
  } else if (cleanHTML.startsWith('```')) {
    cleanHTML = cleanHTML.replace(/^```\n/, '').replace(/\n```$/, '');
  }
  
  const usage = {
    prompt_tokens: data.usage?.input_tokens || 0,
    completion_tokens: data.usage?.output_tokens || 0,
    total_tokens: data.usage?.total_tokens || 0
  };
  
  return {
    html: cleanHTML,
    usage: usage,
    model: data.model
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API /v1/chat/completions
 */
export async function generateHTMLFromText(extractedText, model = 'gpt-5') {
  if (!openaiClient) {
    throw new Error('OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initializeOpenAI() —Å–Ω–∞—á–∞–ª–∞.');
  }
  
  try {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API: /v1/chat/completions
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiClient.apiKey}`
      },
      body: JSON.stringify({
        model: model,
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'user', content: getInitialPrompt(extractedText) }
        ],
        max_completion_tokens: 4000
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API error ${response.status}: ${errorText}`);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    const data = await response.json();
    const htmlContent = data.choices[0].message.content.trim();
    
    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown –æ–±—ë—Ä—Ç–æ–∫ –µ—Å–ª–∏ GPT –∏—Ö –¥–æ–±–∞–≤–∏–ª
    let cleanHTML = htmlContent;
    if (cleanHTML.startsWith('```html')) {
      cleanHTML = cleanHTML.replace(/^```html\n/, '').replace(/\n```$/, '');
    } else if (cleanHTML.startsWith('```')) {
      cleanHTML = cleanHTML.replace(/^```\n/, '').replace(/\n```$/, '');
    }
    
    return {
      html: cleanHTML,
      usage: data.usage,
      model: data.model
    };
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML: ${error.message}`);
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É HTML
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API /v1/chat/completions
 */
export async function applyCorrections(currentHTML, userCorrection, model = 'gpt-5') {
  if (!openaiClient) {
    throw new Error('OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initializeOpenAI() —Å–Ω–∞—á–∞–ª–∞.');
  }
  
  try {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API: /v1/chat/completions
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiClient.apiKey}`
      },
      body: JSON.stringify({
        model: model,
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'user', content: getCorrectionPrompt(currentHTML, userCorrection) }
        ],
        max_completion_tokens: 4000
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API error ${response.status}: ${errorText}`);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    const data = await response.json();
    const htmlContent = data.choices[0].message.content.trim();
    
    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown –æ–±—ë—Ä—Ç–æ–∫
    let cleanHTML = htmlContent;
    if (cleanHTML.startsWith('```html')) {
      cleanHTML = cleanHTML.replace(/^```html\n/, '').replace(/\n```$/, '');
    } else if (cleanHTML.startsWith('```')) {
      cleanHTML = cleanHTML.replace(/^```\n/, '').replace(/\n```$/, '');
    }
    
    return {
      html: cleanHTML,
      usage: data.usage,
      model: data.model
    };
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: ${error.message}`);
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–≤—å—é
 */
export function analyzeHTMLStructure(html) {
  const sections = [];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  const sectionRegex = /<section[^>]*id="([^"]*)"[^>]*>[\s\S]*?<h2[^>]*>(.*?)<\/h2>/g;
  let match;
  
  while ((match = sectionRegex.exec(html)) !== null) {
    const id = match[1];
    const title = match[2].replace(/<[^>]*>/g, '').trim();
    sections.push({ id, title });
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ section, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ h2
  if (sections.length === 0) {
    const h2Regex = /<h2[^>]*>(.*?)<\/h2>/g;
    while ((match = h2Regex.exec(html)) !== null) {
      const title = match[1].replace(/<[^>]*>/g, '').trim();
      sections.push({ title });
    }
  }
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  const tableCount = (html.match(/<table/g) || []).length;
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
  const listCount = (html.match(/<ul/g) || []).length;
  
  return {
    sections,
    tableCount,
    listCount,
    characterCount: html.length,
    hasContent: sections.length > 0 || html.includes('<p')
  };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è HTML (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
 */
export function validateHTML(html) {
  const errors = [];
  const warnings = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
  if (!html || html.trim().length === 0) {
    errors.push('HTML –ø—É—Å—Ç–æ–π');
    return { valid: false, errors, warnings };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ (–±–∞–∑–æ–≤–∞—è)
  const openTags = (html.match(/<section/g) || []).length;
  const closeTags = (html.match(/<\/section>/g) || []).length;
  if (openTags !== closeTags) {
    warnings.push(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–≥–æ–≤ <section>: –æ—Ç–∫—Ä—ã—Ç–æ ${openTags}, –∑–∞–∫—Ä—ã—Ç–æ ${closeTags}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const hasHeadings = html.includes('<h2') || html.includes('<h3');
  if (!hasHeadings) {
    warnings.push('HTML –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ markdown –æ–±—ë—Ä—Ç–∫–∏ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
  if (html.includes('```html') || html.includes('```')) {
    errors.push('HTML —Å–æ–¥–µ—Ä–∂–∏—Ç markdown –æ–±—ë—Ä—Ç–∫–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞');
  }
  
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
 */
export function formatTokenUsage(usage) {
  if (!usage) return 'N/A';
  
  return `–ü—Ä–æ–º–ø—Ç: ${usage.prompt_tokens}, –û—Ç–≤–µ—Ç: ${usage.completion_tokens}, –í—Å–µ–≥–æ: ${usage.total_tokens}`;
}

