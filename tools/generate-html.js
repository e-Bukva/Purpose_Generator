#!/usr/bin/env node
/**
 * –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ GPT-5
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ë–µ—Ä—ë—Ç —Ñ–∞–π–ª –∏–∑ input/
 * 2. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤ GPT-5
 * 3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –≤ generated/
 */

import dotenv from 'dotenv';
import { readdirSync, statSync, writeFileSync } from 'fs';
import { join, extname, basename } from 'path';

dotenv.config();

import { initializeOpenAI, generateHTMLFromFile } from './gpt-client.js';
import { createFullHTMLDocument, PATHS, createSessionTimestamp, createSessionDirectory } from './file-utils.js';
import { HTML_TEMPLATE } from '../config/gpt-prompts.js';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey || apiKey === 'your-openai-api-key-here') {
    console.log('‚úó –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('\nüìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env:');
    console.log('OPENAI_API_KEY=sk-–≤–∞—à-–∫–ª—é—á');
    console.log('OPENAI_MODEL=gpt-5\n');
    return;
  }
  
  const model = process.env.OPENAI_MODEL || 'gpt-5';
  initializeOpenAI(apiKey, model);
  console.log(`‚úì API –≥–æ—Ç–æ–≤ (${model})\n`);
  
  // 2. –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞
  console.log('üìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ input/...');
  
  const files = readdirSync(PATHS.input)
    .filter(f => !f.startsWith('.'))
    .filter(f => ['.pdf', '.docx', '.doc', '.md'].includes(extname(f).toLowerCase()))
    .map(f => ({
      name: f,
      path: join(PATHS.input, f),
      stats: statSync(join(PATHS.input, f))
    }));
  
  if (files.length === 0) {
    console.log('‚úó –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('  –ü–æ–ª–æ–∂–∏—Ç–µ PDF, Word –∏–ª–∏ Markdown —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É input/\n');
    return;
  }
  
  const file = files[0];
  const sizeKB = Math.round(file.stats.size / 1024);
  console.log(`‚úì –ù–∞–π–¥–µ–Ω: ${file.name} (${sizeKB} KB)\n`);
  
  // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
  console.log(`üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ${model}...`);
  
  try {
    const result = await generateHTMLFromFile(file.path, model);
    
    const sizeKB = (result.html.length / 1024).toFixed(1);
    console.log(`‚úì HTML –ø–æ–ª—É—á–µ–Ω (${sizeKB} KB)`);
    console.log(`  –¢–æ–∫–µ–Ω—ã: ${result.usage.prompt_tokens} –ø—Ä–æ–º–ø—Ç + ${result.usage.completion_tokens} –æ—Ç–≤–µ—Ç = ${result.usage.total_tokens}\n`);
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const sessionTimestamp = createSessionTimestamp();
    const sessionPath = createSessionDirectory(sessionTimestamp);
    console.log(`üìÅ –°–µ—Å—Å–∏—è: ${sessionTimestamp}\n`);
    
    // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –≤ —Å–µ—Å—Å–∏—é
    const fullHTML = createFullHTMLDocument(result.html, HTML_TEMPLATE);
    const htmlPath = join(sessionPath, 'proposal.html');
    
    writeFileSync(htmlPath, fullHTML, 'utf-8');
    console.log(`üíæ HTML: ${htmlPath}\n`);
    
    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
    console.log('   npm run pdf\n');
    
  } catch (error) {
    console.log(`‚úó –û—à–∏–±–∫–∞: ${error.message}\n`);
    process.exit(1);
  }
}

main();

